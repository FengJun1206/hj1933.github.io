<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JsFeng&#39;s Blog</title>
  
  
  <link href="/rss2.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-03T15:07:24.693Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JsFeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数</title>
    <link href="http://yoursite.com/2018/01/03/%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/03/函数/</id>
    <published>2018-01-03T15:03:16.000Z</published>
    <updated>2018-01-03T15:07:24.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数可以将程序拆分成独立的几部分，使程序趋于简单化。</p><h2 id="1-1、定义和调用函数"><a href="#1-1、定义和调用函数" class="headerlink" title="1.1、定义和调用函数"></a>1.1、定义和调用函数</h2><p>使用关键字def 来告诉python定义一个函数，向python指出了函数名，也还可以在括号内指出函数为完成任务需要什么样的信息。</p><p>而调用一个函数，只需让python指定函数名以及括号内的必要信息即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_message</span><span class="params">()</span>:</span>         <span class="comment"># 函数定义</span></div><div class="line">    <span class="string">"""display a message about what I am learning."""</span>  <span class="comment"># 文档字符串的注释，描述函数是做什么的，由三引号组成，python用来生成有关程序中函数的文档</span></div><div class="line">    msg = <span class="string">"I'm learning to store code in functions."</span></div><div class="line">    print(msg)</div><div class="line"></div><div class="line"></div><div class="line">display_message()     <span class="comment"># 函数调用</span></div><div class="line"></div><div class="line">----------</div><div class="line">I<span class="string">'m learning to store code in functions.</span></div></pre></td></tr></table></figure><h3 id="1-1-1、向函数参数传递信息"><a href="#1-1-1、向函数参数传递信息" class="headerlink" title="1.1.1、向函数参数传递信息"></a>1.1.1、向函数参数传递信息</h3><p>函数在定义时，可在括号内指定任意参数，在调用时再给其指定一个值，调用函数时，可将值传递给参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">great_user</span><span class="params">(username)</span>:</span>  <span class="comment"># 指定参数（形参）</span></div><div class="line">    print(<span class="string">'Hello '</span> + username.title() + <span class="string">'!'</span>)</div><div class="line"></div><div class="line"></div><div class="line">great_user(<span class="string">'edward'</span>) <span class="comment"># 指定值并传递给参数（实参）</span></div><div class="line">-------</div><div class="line">Hello Edward!</div></pre></td></tr></table></figure><h3 id="1-1-2、形参和实参"><a href="#1-1-2、形参和实参" class="headerlink" title="1.1.2、形参和实参"></a>1.1.2、形参和实参</h3><p>在1.1.1中，变量username是一个形参，它是函数定义时括号内的参数，是函数完成其工作所需的一项信息。</p><p>值’edward’ 是一个实参，它是函数调用时括号内的参数，是调用函数时传递给函数的信息。</p><p>在great_user（’edward’）中，将参数edward传递给函数great_user（），并存储在形参user_name中。</p><h2 id="1-2、传递实参"><a href="#1-2、传递实参" class="headerlink" title="1.2、传递实参"></a>1.2、传递实参</h2><p>函数定义可能包含多个形参，调用时也可以有多个实参，传递实参的方式很多，有位置参数法，（要求形参实参的顺序一致）意义，关键字参数。</p><h3 id="1-2-1、位置实参"><a href="#1-2-1、位置实参" class="headerlink" title="1.2.1、位置实参"></a>1.2.1、位置实参</h3><p>位置实参要求实参与形参的顺序一一对应,切记不能对应错误，另一方面，一个函数可以多次调用，只需再次指定实参即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span></div><div class="line">    <span class="string">"""显示宠物信息"""</span></div><div class="line">    print(<span class="string">'\nI have a '</span> + animal_type + <span class="string">'.'</span>)</div><div class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">'.'</span>)</div><div class="line"></div><div class="line"></div><div class="line">describe_pet(<span class="string">'hamster'</span>, <span class="string">'harry'</span>)  <span class="comment"># 实参与形参顺序对应，宠物种类对应animal_type、名字对应pet_name</span></div><div class="line">describe_pet(<span class="string">'dog'</span>, <span class="string">'baby'</span>)  <span class="comment"># 二次调用</span></div></pre></td></tr></table></figure><h3 id="1-2-2、关键字实参"><a href="#1-2-2、关键字实参" class="headerlink" title="1.2.2、关键字实参"></a>1.2.2、关键字实参</h3><p>位置参数固然有其优点，但只适合形参比较少的程序，若形参有很多，传递实参时就容易显得杂乱无章，关键字实参将名称与值关联起来，向形参传递实参时就不会混淆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type, pet_name)</span>:</span>   <span class="comment"># 形参</span></div><div class="line">    <span class="string">"""显示宠物信息"""</span></div><div class="line">    print(<span class="string">'\nI have a '</span> + animal_type + <span class="string">'.'</span>)</div><div class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">'.'</span>)</div><div class="line"></div><div class="line"></div><div class="line">describe_pet(animal_type= <span class="string">'hamster'</span>, pet_name= <span class="string">'harry'</span>)  <span class="comment"># 将实参直接存储到形参变量中，不管顺序如何变化都不影响结果</span></div><div class="line">describe_pet(pet_name= <span class="string">'baby'</span>, animal_type= <span class="string">'dog'</span>)</div></pre></td></tr></table></figure><h3 id="1-2-3、默认值"><a href="#1-2-3、默认值" class="headerlink" title="1.2.3、默认值"></a>1.2.3、默认值</h3><p>在函数定义时可以给形参直接指定个默认值，如果与其关联的实参给有默认值的形参提供了值，则用提供的值，否则用默认值。</p><p><strong>需要注意的是，在调用函数时，只有一个实参，且是位置实参，那么没有指定默认值的形参要在有默认值的形参前面，否则实参将会以位置参数的形式传递给第一个形参：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name, animal_type=<span class="string">'dogs'</span>)</span>:</span>     <span class="comment"># 有默认值在没有默认值的形参后面</span></div><div class="line">    <span class="string">"""显示宠物信息"""</span></div><div class="line">    print(<span class="string">'\nI have a '</span> + animal_type + <span class="string">'.'</span>)</div><div class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">'.'</span>)</div><div class="line"></div><div class="line"></div><div class="line">describe_pet(<span class="string">'willie'</span>)           <span class="comment"># 这个实参将传递给第一个形参，第二个形参使用默认值</span></div><div class="line">describe_pet(animal_type=<span class="string">'dog'</span>, pet_name=<span class="string">'baby'</span>)  <span class="comment"># 有默认值的形参使用实参</span></div><div class="line">-------------------</div><div class="line"></div><div class="line">I have a dogs.</div><div class="line">My dogs<span class="string">'s name is Willie.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">I have a dog.</span></div><div class="line"><span class="string">My dog'</span>s name <span class="keyword">is</span> Baby.</div></pre></td></tr></table></figure><h3 id="1-2-4、等效的函数调用"><a href="#1-2-4、等效的函数调用" class="headerlink" title="1.2.4、等效的函数调用"></a>1.2.4、等效的函数调用</h3><p>鉴于可混合位置实参、关键字实参以及默认值，通常有多种调用方式，以下便是等效的函数调用方式，其结果一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一只名为Willie的小狗</span></div><div class="line">describe_pet(<span class="string">'willie'</span>)            <span class="comment"># 结果一致</span></div><div class="line">describe_pet(pet_name=<span class="string">'willie'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 一只名为Harry的仓鼠                    # 结果一致</span></div><div class="line">describe_pet(<span class="string">'harry'</span>, <span class="string">'hamster'</span>)</div><div class="line">describe_pet(pet_name=<span class="string">'harry'</span>, animal_type=<span class="string">'hamster'</span>)</div><div class="line">describe_pet(animal_type=<span class="string">'hamster'</span>, pet_name=<span class="string">'harry'</span>)</div></pre></td></tr></table></figure><h3 id="1-2-5、避免实参错误"><a href="#1-2-5、避免实参错误" class="headerlink" title="1.2.5、避免实参错误"></a>1.2.5、避免实参错误</h3><p>在使用函数时，若遇到实参不匹配时，python会提示我们需要为哪些提供实参，如果这个函数存储在一个独立的文件中，那么需要打开这个文件查看函数的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name, animal_type)</span>:</span></div><div class="line">    print(<span class="string">'My '</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">'.'</span>)</div><div class="line"></div><div class="line"></div><div class="line">describe_pet()             <span class="comment"># 这个函数缺少实参，python会提示我们需要为哪个形参提供实参</span></div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"C:/Users/hj/PycharmProjects/untitled1/function_1.py"</span>, line <span class="number">55</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    describe_pet()</div><div class="line">TypeError: describe_pet() missing <span class="number">2</span> required positional arguments: <span class="string">'pet_name'</span> <span class="keyword">and</span> <span class="string">'animal_type'</span></div></pre></td></tr></table></figure><h2 id="1-3、返回值"><a href="#1-3、返回值" class="headerlink" title="1.3、返回值"></a>1.3、返回值</h2><p>函数并非总是直接显示输出，相反，它也处理一些数据，并返回一个或一组值，返回的 值称为返回值，它可以返回列表、元组和字典，<strong>可使用return 语句将值返回到调用函数的代码行</strong>，返回值可以让你能够将程序的大部分繁重工作移到函数中去完成，从而简化程序。</p><h3 id="1-3-1、返回简单值"><a href="#1-3-1、返回简单值" class="headerlink" title="1.3.1、返回简单值"></a>1.3.1、返回简单值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name, last_name)</span>:</span></div><div class="line">  <span class="string">"""返回完整姓名"""</span></div><div class="line">  full_name = first_name + <span class="string">' '</span> + last_name <span class="comment"># 将完整姓名存储到变量full_name中</span></div><div class="line">  <span class="keyword">return</span> full_name.title()  <span class="comment"># 将full_name的值返回到函数调用行</span></div><div class="line">musician = get_formatted_name(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>) <span class="comment"># 在调用返回值的函数时，需要提供一个变量，用于存储返回值</span></div><div class="line">print(musician)  <span class="comment"># 打印变量</span></div><div class="line">------</div><div class="line">Jimi Hendrix</div></pre></td></tr></table></figure><h3 id="1-3-2、让实参变得可选"><a href="#1-3-2、让实参变得可选" class="headerlink" title="1.3.2、让实参变得可选"></a>1.3.2、让实参变得可选</h3><p>有时需要让实参变得可选，这样就能存储额外的信息，可使用默认值来使实参可选：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 拓展get_formatted_name(),使其还处理中间名</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name, last_name, middle_name=<span class="string">''</span>)</span>:</span>  <span class="comment"># 指定middle_name的默认值为空</span></div><div class="line">  <span class="string">"""返回完整姓名"""</span></div><div class="line">  <span class="keyword">if</span> middle_name:     <span class="comment"># 判断调用函数时是否给middle_name指定了实参，python将非空字符串认为True</span></div><div class="line">    full_name = first_name + <span class="string">' '</span> + middle_name + <span class="string">' '</span> + last_name</div><div class="line">  <span class="keyword">else</span>:                  </div><div class="line">    full_name = first_name + <span class="string">' '</span> + last_name</div><div class="line">  <span class="keyword">return</span> full_name.title()</div><div class="line"></div><div class="line">musician = get_formatted_name(<span class="string">'jimi'</span>, <span class="string">'hooker'</span>, <span class="string">'lee'</span>)</div><div class="line">print(musician)</div><div class="line"></div><div class="line">musician = get_formatted_name(<span class="string">'jimi'</span>, <span class="string">'hooker'</span>) <span class="comment"># 调用函数时，如果没有middle_name的实参就会导致程序错误，因此可以指定形参middle_name的默认值为空，当有实参时则用实参的值，没有的时候就是空字符串，这样不会奔溃程序</span></div><div class="line">print(musician)</div><div class="line">-----</div><div class="line"></div><div class="line">Jimi Lee Hooker</div><div class="line">Jimi Hooker</div></pre></td></tr></table></figure><h3 id="1-3-3、返回字典"><a href="#1-3-3、返回字典" class="headerlink" title="1.3.3、返回字典"></a>1.3.3、返回字典</h3><p>函数可以返回任何类型的值，包括列表、元组以及字典等较复杂的数据结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name, last_name)</span>:</span></div><div class="line">  <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span></div><div class="line">  person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125;  <span class="comment"># 也可以时列表、元组</span></div><div class="line">  <span class="keyword">return</span> person</div><div class="line"></div><div class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>)</div><div class="line">print(musician) <span class="comment"># 音乐家</span></div><div class="line">-------</div><div class="line"></div><div class="line">&#123;<span class="string">'first'</span>: <span class="string">'jimi'</span>, <span class="string">'hendrix'</span>: <span class="string">'hendrix'</span>&#125;</div></pre></td></tr></table></figure><p>返回字典，可以轻易拓展这个函数，使其接受可选值，如年龄、中间名、职业等你想存储的其他信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">buile_person</span><span class="params">(first_name, last_name, age=<span class="string">''</span>)</span>:</span> <span class="comment"># 新增了age可选项</span></div><div class="line">  <span class="string">"""返回一个字典，其中包含人名、年龄"""</span></div><div class="line">  person = &#123;<span class="string">'first'</span>: first_name, <span class="string">'last'</span>: last_name&#125;</div><div class="line">  <span class="keyword">if</span> age:</div><div class="line">    person[<span class="string">'age'</span>] = age  <span class="comment"># 将键-值对添加到字典person中</span></div><div class="line">  <span class="keyword">return</span> person</div><div class="line"></div><div class="line">musician = build_person(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>, age=<span class="number">27</span>)</div><div class="line">print(musician)</div><div class="line">-------</div><div class="line">&#123;<span class="string">'first'</span>: <span class="string">'jimi'</span>, <span class="string">'last'</span>: <span class="string">'hendrix'</span>, <span class="string">'age'</span>: <span class="number">27</span>&#125;</div></pre></td></tr></table></figure><h3 id="1-3-4、结合使用函数和-while-循环"><a href="#1-3-4、结合使用函数和-while-循环" class="headerlink" title="1.3.4、结合使用函数和 while 循环"></a>1.3.4、结合使用函数和 while 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name, last_name)</span>:</span></div><div class="line">  <span class="string">"""返回完整姓名"""</span></div><div class="line">  full_name = first_name + <span class="string">' '</span> + last_name</div><div class="line">  <span class="keyword">return</span> full_name.title()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">  print(<span class="string">"\nTell me what's your name: "</span>)</div><div class="line">  print(<span class="string">"(enter 'q' to quit)"</span>)        <span class="comment"># 设置循环退出条件</span></div><div class="line">  f_n = input(<span class="string">'First_name: '</span>)         <span class="comment"># 接收用户输入信息</span></div><div class="line">  <span class="keyword">if</span> f_n == <span class="string">'q'</span>:</div><div class="line">    <span class="keyword">break</span></div><div class="line">    </div><div class="line">  l_n = input(<span class="string">'Last_name: '</span>)</div><div class="line">  <span class="keyword">if</span> l_n == <span class="string">'q'</span>:</div><div class="line">    <span class="keyword">break</span></div><div class="line">    </div><div class="line">  formatted = get_formatted_name(f_n, l_n)</div><div class="line">  print(<span class="string">'\nHello: '</span> + formatted + <span class="string">'!'</span>)</div><div class="line">--------------------</div><div class="line"></div><div class="line">Please tell me your name: </div><div class="line">(Enter <span class="string">'q'</span> to quit.)</div><div class="line">First_name: Li</div><div class="line">Last_name: La</div><div class="line"></div><div class="line">Hello Li La!</div></pre></td></tr></table></figure><h2 id="1-4、传递列表"><a href="#1-4、传递列表" class="headerlink" title="1.4、传递列表"></a>1.4、传递列表</h2><p>向函数传递列表，这种列表包含的可能是名字、数字或更复杂的对象（字典），将列表传递给函数后，函数就能直接访问其内容，可以提高处理列表的效率。</p><h3 id="1-4-1、在函数中修改列表"><a href="#1-4-1、在函数中修改列表" class="headerlink" title="1.4.1、在函数中修改列表"></a>1.4.1、在函数中修改列表</h3><p>将列表传递给函数后，可以对其进行修改，修改后是永久性的，可以高效第处理大量数据。</p><p>一家为用户提交设计制作的3D打印模型公司，需要打印的设计存储在一个列表中，打印后移到另一个列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printed_models</span><span class="params">(unprinted_designs, completed_models)</span>:</span> <span class="comment"># 定义一个函数，2个形参，一个为未打印的设计，一个为完成的模型</span></div><div class="line">  <span class="string">"""</span></div><div class="line"><span class="string">  模拟打印每个设计，直到没有未打印的为止</span></div><div class="line"><span class="string">  打印每个设计后，将其移动completed_models中</span></div><div class="line"><span class="string">  """</span></div><div class="line">  <span class="keyword">while</span> unprinted_designs:     <span class="comment"># 循环（只要unprinted_designs不为空循环继续）</span></div><div class="line">    current_design = unprited_designs.pop()   <span class="comment"># 将列表中所有元素弹出</span></div><div class="line">    <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></div><div class="line">    print(<span class="string">'Printing model: '</span> + current_design)</div><div class="line">    completed_models.append(current_design)     <span class="comment"># 将弹出的元素添加到空列表completed_models中</span></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span><span class="params">(completed_models)</span>:</span>   <span class="comment"># 定义一个函数，用以处理所有打印好的模型</span></div><div class="line">  <span class="string">"""显示打印好的模型"""</span></div><div class="line">  print(<span class="string">'\nThe folloing models have been printed:'</span>)</div><div class="line">  <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:    <span class="comment"># 遍历打印好的模型列表completed_models</span></div><div class="line">    print(completed_model)</div><div class="line">    </div><div class="line">    </div><div class="line">unprinted_designs = [<span class="string">'iphone case'</span>, <span class="string">'robot pendant'</span>, <span class="string">'dodecahedron'</span>]   <span class="comment"># 定义未打印的设计的列表</span></div><div class="line">completed_models = []         <span class="comment"># 定义已经打印好的模型为空列表</span></div><div class="line"></div><div class="line">printed_models(unprinted_designs, completed_models)     <span class="comment"># 调用函数，将列表传递给主函数</span></div><div class="line">show_printed_models(completed_models)</div><div class="line"></div><div class="line">--------------</div><div class="line">Printing model: dodecahedron</div><div class="line">Printing model: robot pendant</div><div class="line">Printing model: iphone case</div><div class="line"></div><div class="line">The following models have been printed: </div><div class="line">dodecahedron</div><div class="line">robot pendant</div><div class="line">iphone case</div></pre></td></tr></table></figure><h3 id="1-4-2、禁止函数修改列表"><a href="#1-4-2、禁止函数修改列表" class="headerlink" title="1.4.2、禁止函数修改列表"></a>1.4.2、禁止函数修改列表</h3><p>有时需要禁止修改列表，因为修改是永久的，如上个列子，修改未打印的设计中元素，将其中的元素全部移到已经打印的模型列表中，原来的列表就变为空，为解决这个问题，可以在调用函数时，只传递列表的副本（切片）而不是原列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在上个列子中，可以在调用函数，传递列表时，只传递列表的切片</span></div><div class="line"><span class="comment"># 格式为：function_name(list_name[:])</span></div><div class="line">printed_models(unprinted_design[:], completed_models)</div></pre></td></tr></table></figure><p><strong>但是除非有充分理由需要保留原列表，否则尽量避免使用，因为可以使函数避免花时间去和内存去创建副本，从而提高效率，在处理大型列表尤其如此。</strong></p><h2 id="1-5、传递任意数量的实参"><a href="#1-5、传递任意数量的实参" class="headerlink" title="1.5、传递任意数量的实参"></a>1.5、传递任意数量的实参</h2><p>有时不知需要接受多少个实参，好在python可以允许函数调用语句中收集任意数量的实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*topping)</span>:</span>      <span class="comment"># 形参名*topping的星号让python创建一个名为tooping的空元组，并将传递来的实参全部封装在这个元组中 </span></div><div class="line">  <span class="string">"""打印顾客点的所有配料"""</span></div><div class="line">  print(topping)</div><div class="line"></div><div class="line">make_pizza(<span class="string">'pepperoni'</span>)</div><div class="line">make_pizza(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</div><div class="line"></div><div class="line">----</div><div class="line">(<span class="string">'pepperoni'</span>)     <span class="comment"># 封装成一个元组</span></div><div class="line">(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</div></pre></td></tr></table></figure><h3 id="1-5-1、结合使用位置实参和任意数量实参"><a href="#1-5-1、结合使用位置实参和任意数量实参" class="headerlink" title="1.5.1、结合使用位置实参和任意数量实参"></a>1.5.1、结合使用位置实参和任意数量实参</h3><p>如果要让函数接受不同类型的实参，必须将接受任意数量的实参放置在位置参数后面，python先匹配位置和关键字实参，再匹配任意数量的实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span>  <span class="comment"># 定义一个尺寸的位置形参，放在任意数量形参前</span></div><div class="line">    <span class="string">"""打印顾客点的所有配料"""</span></div><div class="line">    print(<span class="string">'\nMaking a '</span> + str(size) + <span class="string">'-inch pizza with the following toppings: '</span>)</div><div class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</div><div class="line">        print(<span class="string">'- '</span> + topping)</div><div class="line"></div><div class="line"></div><div class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</div><div class="line">make_pizza(<span class="number">20</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</div><div class="line"></div><div class="line">------------</div><div class="line">Making a <span class="number">16</span>-inch pizza <span class="keyword">with</span> the following toppings: </div><div class="line">- pepperoni</div><div class="line"></div><div class="line">Making a <span class="number">20</span>-inch pizza <span class="keyword">with</span> the following toppings: </div><div class="line">- mushrooms</div><div class="line">- green peppers</div><div class="line">- extra cheese</div></pre></td></tr></table></figure><h3 id="1-5-2、使用任意数量的关键字实参"><a href="#1-5-2、使用任意数量的关键字实参" class="headerlink" title="1.5.2、使用任意数量的关键字实参"></a>1.5.2、使用任意数量的关键字实参</h3><p>有时，要接受任意数量的实参，但不知道传递给函数的会是什么信息，这种情况下，可以将函数写成能够接受任意数量的键-值对，调用语句提供了多少就接受多少：</p><p>下面列子，你将接受用户信息，但不确定什么信息，函数build_profile()接受名和姓，同时还接受任意数量的关键字实参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first, last, **user_info)</span>:</span>  <span class="comment"># **user_info两个星号让python创建一个名为user_info的空字典，并将接受到所有名称-值对都封装在其中</span></div><div class="line">    <span class="string">"""创建一个字典，其中包含我们知道的有关用户的一切"""</span></div><div class="line">    profile = &#123;&#125;     <span class="comment"># 首先创建一个空字典，用以存储用户的名和姓</span></div><div class="line">    profile[<span class="string">'first_name'</span>] = first  <span class="comment"># 将名和姓添加到字典profile中</span></div><div class="line">    profile[<span class="string">'last_name'</span>] = last</div><div class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():  <span class="comment"># 遍历user_info这个字典</span></div><div class="line">        profile[key] = value          <span class="comment"># 将每个键-值对添加到字典profile中</span></div><div class="line">    <span class="keyword">return</span> profile         <span class="comment"># 返回字典profile到函数调用行，并把它存储到变量user_profile中</span></div><div class="line"></div><div class="line"></div><div class="line">user_profile = build_profile(<span class="string">'albert'</span>, <span class="string">'einstein'</span>,</div><div class="line">                             location=<span class="string">'princeton'</span>,</div><div class="line">                             field=<span class="string">'physics'</span>)  <span class="comment"># 传入实参（调用函数）</span></div><div class="line">print(user_profile)</div></pre></td></tr></table></figure><p>在上面列子中，返回的字典包含了用户的名和姓，已经求学的地方和所学专业，调用这个函数时，不管额外提供了多少键-值对，它都能正确处理。</p><blockquote><p><strong>练习</strong></p></blockquote><p>编写一个函数，将一辆汽车的信息存储在一个字典中，这个函数始终接受制造商和型号，还接受关键字实参，调用这个函数，提供必不可少的信息以及两个名称-值对，如颜色、选择配件等：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_car</span><span class="params">(manufacturer, model, **options)</span>:</span>   <span class="comment"># **options接受任意数量的关键字实参，创建一个字典并将信息存储在其中</span></div><div class="line">    <span class="string">"""做一个字典代表一辆车"""</span></div><div class="line">    car_dict = &#123;                           <span class="comment"># 创建一个字典能代表一辆车，其中有必不可少的 制造商型号等信息</span></div><div class="line">        <span class="string">'manufacturer'</span>: manufacturer.title(),</div><div class="line">        <span class="string">'model'</span>: model.title(),</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> option, value <span class="keyword">in</span> options.items():   <span class="comment"># 遍历字典options</span></div><div class="line">        car_dict[option] = value            <span class="comment"># 将其他信息诸如颜色等添加到字典car_dict中</span></div><div class="line">    <span class="keyword">return</span> car_dict                   <span class="comment"># 返回car_dict字典</span></div><div class="line"> </div><div class="line"></div><div class="line">car = make_car(<span class="string">'subaru'</span>, <span class="string">'outback'</span>, color=<span class="string">'blue'</span>, tow_package=<span class="keyword">True</span>)</div><div class="line">print(car)</div><div class="line"></div><div class="line">my_car = make_car(<span class="string">'honda'</span>, <span class="string">'accord'</span>, year=<span class="number">1991</span>, color=<span class="string">'white'</span>, headlights=<span class="string">'popup'</span>)</div><div class="line">print(my_car)</div></pre></td></tr></table></figure><h2 id="1-6、将函数存储在模块中"><a href="#1-6、将函数存储在模块中" class="headerlink" title="1.6、将函数存储在模块中"></a>1.6、将函数存储在模块中</h2><p><strong>函数可以将代码块与主程序分离，这样使程序更容易理解，还可以进一步将函数存储到独立的文件中（模块），再将模块带入主程序中，这样就可以将重点放在程序的高层逻辑上，可以与其他程序员共享这个文件而不是程序。</strong></p><h3 id="1-6-1、导入整个模块"><a href="#1-6-1、导入整个模块" class="headerlink" title="1.6.1、导入整个模块"></a>1.6.1、导入整个模块</h3><p>模块的拓展名为.py的文件，包含要导入到程序中的代码，下面来演示再另一个程序中调用第一个模块里的函数。</p><p>创建一个名为pizza.py的模块，里面包含make_pizza() 的函数，再在模块pizza.py所在目录创建一个名为making_pizza.py的文件，在这个文件中导入刚创建的模块，再调用make_pizza() 函数，调用模块中函数格式：(模块名.函数名，如pizza.make_pizza() )：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pizza.py 模块</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_piza</span><span class="params">(size, *topping)</span>:</span>   <span class="comment"># make_pizza() 函数</span></div><div class="line">  <span class="string">"""概述要制作的披萨"""</span></div><div class="line">    print(<span class="string">'\nMaking a '</span> + str(size) + <span class="string">'-inch pizza with the following topping:'</span>)</div><div class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</div><div class="line">        print(<span class="string">'- '</span> + topping)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># making_pizza.py 文件</span></div><div class="line"><span class="keyword">import</span> pizza        <span class="comment"># 导入pizza模块</span></div><div class="line"></div><div class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">'fish'</span>)    <span class="comment"># 调用pizza.py模块中的make_pizza()函数</span></div><div class="line">pizza.make_pizza(<span class="number">20</span>, <span class="string">'egg'</span>, <span class="string">'meat'</span>, <span class="string">'fish'</span>)   </div><div class="line">----------------</div><div class="line"></div><div class="line">Making a <span class="number">12</span>-inch pizza <span class="keyword">with</span> the following topping:</div><div class="line">- meat</div><div class="line">- fish</div><div class="line">- egg</div></pre></td></tr></table></figure><h3 id="1-6-2、导入特定的函数："><a href="#1-6-2、导入特定的函数：" class="headerlink" title="1.6.2、导入特定的函数："></a>1.6.2、导入特定的函数：</h3><p>import 只是一种导入方式，还可以导入模块中的特定函数，其格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> modul_name <span class="keyword">import</span> function_name  <span class="comment"># from 模块名 import 函数名</span></div><div class="line"><span class="keyword">from</span> modul_name <span class="keyword">import</span> function_0, function_1, function_2  <span class="comment"># 导入任意数量的函数</span></div></pre></td></tr></table></figure><p>对于1.6.1的列子也可以使用这种导入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza</div><div class="line"></div><div class="line">make_pizza(<span class="number">16</span>, <span class="string">'fish'</span>)  <span class="comment"># 因为import语句显示地导入了函数名，所以调用时不需要指定其名称</span></div></pre></td></tr></table></figure><h3 id="1-6-3、使用-as-给函数指定别名"><a href="#1-6-3、使用-as-给函数指定别名" class="headerlink" title="1.6.3、使用 as 给函数指定别名"></a>1.6.3、使用 as 给函数指定别名</h3><p>如果要导入的函数与现有函数名有冲突，或者函数名过长，可指定别名（用以代替函数名，类似于外号），只需在导入模块时，（from   modul_name  import  funtion_name   as   fn）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp  <span class="comment"># 给函数指定别名</span></div><div class="line"></div><div class="line">mp(<span class="number">16</span>, <span class="string">'fish'</span>)  <span class="comment"># 调用时可以使用别名</span></div></pre></td></tr></table></figure><h3 id="1-6-4、给模块指定别名"><a href="#1-6-4、给模块指定别名" class="headerlink" title="1.6.4、给模块指定别名"></a>1.6.4、给模块指定别名</h3><p>也可以给模块指定别名，其格式为：( import  module_name  as  mn )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p</div><div class="line"></div><div class="line">p.make_pizza(<span class="number">16</span>, <span class="string">'fish'</span>)</div></pre></td></tr></table></figure><h3 id="1-6-5、导入模块中所有函数"><a href="#1-6-5、导入模块中所有函数" class="headerlink" title="1.6.5、导入模块中所有函数"></a>1.6.5、导入模块中所有函数</h3><p>使用星号（*）可以让python导入模块中的所有函数，其格式为：</p><blockquote><p>from  modul_name  import  *</p></blockquote><p><strong>在大型模块中，最好不要采用这种导入方式，如果模块中有函数的名称与你的项目有相同的，可能导致意想不到的结果，python处置名称相同的函数或者变量时，会进行覆盖，最佳做法是，只导入需要的函数，要么整个模块并使用句点表示法（即modul_name.function_name() ）。</strong></p><h2 id="1-7、函数编写指南"><a href="#1-7、函数编写指南" class="headerlink" title="1.7、函数编写指南"></a>1.7、函数编写指南</h2><ul><li>函数名，应取具有描述性的名称（即与实现函数功能相关的名称），使用小写字母与下划线，模块名亦如此，这样便于理解。</li><li>每个函数应有注释，紧跟函数定义后面，采用<strong>文档字符串格式</strong>。</li><li>给形参指定默认值时，等号两边不用有空格，实参亦如此。</li><li>PEP 8 建议代码行长度不超过79个字符，如果形参很多，超过79个字符，可以在函数定义时输入左括号后按回车键，并在下一行按两次Tab键，实质上多数编辑器都能自动实现参数对齐，如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">        parameter_0, parameter_1, parameter_2,</span></span></div><div class="line"><span class="function"><span class="params">        parameter_3, parameter_4, parameter_5</span></span></div><div class="line"><span class="function"><span class="params">    </span></span></div><div class="line"><span class="function"><span class="params">)</span>:</span></div></pre></td></tr></table></figure><ul><li>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开，这样将更容易知道前一个函数在哪结束，下一个函数在哪开始。</li><li>所有的import 语句都应在开头，唯一的列外的情形时，在文件开头使用了注释来描述整个程序。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;p&gt;函数可以将程序拆分成独立的几部分，使程序趋于简单化。&lt;/p&gt;
&lt;h2 id=&quot;1-1、定义和调用函数&quot;&gt;&lt;a href=&quot;#1-1、定义和调
      
    
    </summary>
    
      <category term="Python 基础" scheme="http://yoursite.com/categories/Python-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>hexo blog</title>
    <link href="http://yoursite.com/2017/10/10/hexo-blog-1/"/>
    <id>http://yoursite.com/2017/10/10/hexo-blog-1/</id>
    <published>2017-10-10T14:32:55.000Z</published>
    <updated>2017-10-10T15:32:28.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、hexo是什么："><a href="#1、hexo是什么：" class="headerlink" title="1、hexo是什么："></a>1、hexo是什么：</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://hexo.io" target="_blank" rel="external">hexo官网</a></p><p>  <img src="http://upload-images.jianshu.io/upload_images/4209226-81c675b08828606c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo文件目录结构">   </p><h1 id="2、搭建流程："><a href="#2、搭建流程：" class="headerlink" title="2、搭建流程："></a>2、搭建流程：</h1><ul><li>配置搭建环境（含node.js、Git和github账户的申请配置）  </li><li>安装hexo  </li><li>配置hexo</li><li>将hexo与github page联系起来</li><li>发布文章</li><li>主题配置</li><li>博客优化</li><li>绑定域名  </li></ul><h1 id="3、node-js-安装"><a href="#3、node-js-安装" class="headerlink" title="3、node.js 安装"></a>3、node.js 安装</h1><p><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi" target="_blank" rel="external">Windows Installer 64-bit</a>  </p><p><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi" target="_blank" rel="external">Windows Installer 32-bit</a>  </p><p>一路保持默认即可，安装结束后，检查组件是否安装好，同时按win（windows键）+R键，输入cmd（或者在开始输入CMD，右键管理员允许），打开命令窗口。<br>windows运行界面  </p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-baa0d92e8171efaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">    </p><p>在命令窗口输入   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure><p>   结果如下图，则表示node.js安装成功</p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-bbd2482a705e5094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><h1 id="4、-安装Git："><a href="#4、-安装Git：" class="headerlink" title="4、 安装Git："></a>4、 安装Git：</h1><blockquote><p><a href="https://git-scm.com/downloads" target="_blank" rel="external">Git官网地址</a>  </p></blockquote><p>安装默认即可，要注意的是在选择PATH选项时，建议按照下图选择，这样会使得Git在安装的时候会在系统PATH中加入Git的路径，可以直接调用CMD。  </p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-1f5aca1e08b652f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>检查安装是否正确，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/4209226-0d1a4891a27a2516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">   </p><h1 id="5、github账户注册和配置："><a href="#5、github账户注册和配置：" class="headerlink" title="5、github账户注册和配置："></a>5、github账户注册和配置：</h1><blockquote><p><a href="https://github.com/" target="_blank" rel="external">官网地址</a></p></blockquote><p>输入自己的用户名、邮箱、密码，注册完毕后，一定要去自己注册的邮箱中确认，否则不能使用gh-page。  </p><blockquote><p>创建代码库：  </p></blockquote><p>登录进去后，点击右上角的+号，选择New repository：<br><img src="http://upload-images.jianshu.io/upload_images/4209226-3b18ee9a2345b932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><p>Repository name（仓库名字）一定要填与自己github账户名一样的名字，不然后续会有些麻烦，此处因为我已经创建了。<br><img src="http://upload-images.jianshu.io/upload_images/4209226-94ef38a62b1d0e74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><blockquote><p>代码库设置  </p></blockquote><p>进入你的仓库后，选择setting，如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/4209226-62f4ed7e3f3d4953.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><p>下拉找到Github Pages，找到Source，选择master branch，再点击save保存，过一会会生成一个github pages网址。<br><img src="http://upload-images.jianshu.io/upload_images/4209226-be4a215f803ca991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><h1 id="6、-安装配置hexo："><a href="#6、-安装配置hexo：" class="headerlink" title="6、 安装配置hexo："></a>6、 安装配置hexo：</h1><blockquote><p>安装hexo</p></blockquote><p>打开git brash或者cmd控制台</p><ul><li>安装hexo依赖  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure><ul><li>安装install 组件  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure><ul><li>查看版本  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v`</div></pre></td></tr></table></figure><p>如下图所示，则表示安装成功  </p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-5c7f26fad73a622e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p><blockquote><p><strong>配置hexo</strong></p></blockquote><ul><li>hexo初始化</li></ul><p>使用命令切换到你需要存放本地仓库的磁盘，然后在磁盘根目录新建文件夹（本地仓库）。<br>假如你在E盘根目录新建一个文件夹（**此处文件夹名必须和你的github新建的仓库名（Repository name）一致）    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">E:    #切换到E盘</div><div class="line"></div><div class="line">hexo init xx.github.io     #新建本地仓库 ```  </div><div class="line"></div><div class="line">初始化完毕后，在E盘根目录会看到一个xx.github.io的文件夹，这就是你的本地仓库。</div></pre></td></tr></table></figure><ul><li>安装npm包  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><ul><li>生成 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g   #hexo g 是hexo generate的简写```</div></pre></td></tr></table></figure><ul><li>启动服务预览  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s   #hexo s 是hexo server的简写```  </div><div class="line">hexo s -g</div></pre></td></tr></table></figure><p>当完成上述操作后提示如下，即可访问http:localhost:4000/   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure><blockquote><p><strong>填坑</strong> </p></blockquote><p> 理论上到此处就可以访问http:localhost:4000/，但是事与愿违，4000端口往往被占用，导致不能访问，不过官方也给出了解决方法:<a href="https://hexo.io/zh-cn/docs/server.html#自定义-IP" target="_blank" rel="external">https://hexo.io/zh-cn/docs/server.html#自定义-IP</a>  hexo3.0后的版本，由于服务器是独立成个别模块，所以首先需要安装hexo-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-server –save</div></pre></td></tr></table></figure><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure><p>hexo server </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server -p 5000 #更改为5000端口</div></pre></td></tr></table></figure><p>在浏览器输入http:localhost:5000/即可访问  </p><h1 id="7、将hexo和github关联起来："><a href="#7、将hexo和github关联起来：" class="headerlink" title="7、将hexo和github关联起来："></a>7、将hexo和github关联起来：</h1><ul><li>配置git个人信息：  </li></ul><p>第一次使用git的话，需要配置用户名与邮箱地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;XXX&quot;</div><div class="line">git config --global user.email &quot;XXX@XXXcom&quot;</div></pre></td></tr></table></figure></p><p>检查是否有SSH，没有的话需要在github新建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh   #检查</div><div class="line">ls          #查看</div></pre></td></tr></table></figure></p><p>如果有的话，会有两个文件，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4209226-6d009cf4c555c0c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>生成新的密钥  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;XXX@XXXcom&quot;</div></pre></td></tr></table></figure><ul><li>将SSH Key 添加到ssh-agent</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval $(ssh-agent -s)</div></pre></td></tr></table></figure><ul><li>查看SSH返回路径  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure><p>添加成功，会返回路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Identity added: /c/User/Administator/.ssh/id_rsa (/c/Users/Administator/.ssh/id_rsa)</div></pre></td></tr></table></figure></p><p>根据地址找到这两个文件<br><img src="http://upload-images.jianshu.io/upload_images/4209226-f2be6983ecb919db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>把SSH添加到github上  </li></ul><p>打开github，右上角选择setting，再选择SSH and GPG keys，选择New SSH key（添加SSH key），将id_rsa.pub的文件拷贝到key中，最后Add SSH key即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-6915fe56cf8f835c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>验证SSH  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/4209226-796dd612749d9951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>配置Deployment  </li></ul><p>找到本地仓库（xx.github.io）,打开找到_config.yml文件，（建议使用Notepad++编辑），再找到deploy，配置如下：<br><img src="http://upload-images.jianshu.io/upload_images/4209226-8241abfce57fb23e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>git@github.com都是一致的，后面的则分别是github帐户名、仓库名<br>图上coding地址为使用coding加速后才添加的，此处可不添加<br>修改完毕后保存，并使用命令保存，否则报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p><h1 id="8、发布文章-："><a href="#8、发布文章-：" class="headerlink" title="8、发布文章 ："></a>8、发布文章 ：</h1><ul><li>新建一篇名为article title的博客：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post &quot;article title&quot;</div></pre></td></tr></table></figure></li></ul><p>在我的电脑的目录下 E:\xx.github.io\source\ _posts 将会看到 article title.md 文件（打开.md文件，windows推荐使用markdownpad2）  </p><ul><li>生成部署：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean  </div><div class="line">hexo g                 #生成</div><div class="line">hexo d                 #部署  </div><div class="line">hexo d -g            #也可以只有一步，在部署前先生成</div></pre></td></tr></table></figure></li></ul><p>部署完毕后即可访问博客：<a href="https://xx.github.io/" target="_blank" rel="external">https://xx.github.io/</a>  </p><h1 id="9、主题配置："><a href="#9、主题配置：" class="headerlink" title="9、主题配置："></a>9、主题配置：</h1><blockquote><p>详情请见这篇文章：<a href="http://www.jianshu.com/p/d350dec39078" target="_blank" rel="external">NexT主题配置</a>  </p></blockquote><h1 id="10、博客优化："><a href="#10、博客优化：" class="headerlink" title="10、博客优化："></a>10、博客优化：</h1><p>由于诸多原因导致国内访问github速度很慢，有时更新一篇博客，或者改动一些配置，需要很长时间才能加载出来，所以我们可以对博客进行一些优化，提高加载速度。<br>详情请见下面这篇文章：  </p><blockquote><p><a href="http://www.jianshu.com/p/414ca84237ea" target="_blank" rel="external">http://www.jianshu.com/p/414ca84237ea</a>  </p></blockquote><h1 id="11、绑定域名："><a href="#11、绑定域名：" class="headerlink" title="11、绑定域名："></a>11、绑定域名：</h1><p>一般使用hexo搭建博客后，博客地址大多为：<a href="https://xx.github.io之类，一来是不好听没有个性，二来是不方便管理，三是速度慢。" target="_blank" rel="external">https://xx.github.io之类，一来是不好听没有个性，二来是不方便管理，三是速度慢。</a>  </p><blockquote><p>购买域名  </p></blockquote><p><strong>比如国外的：<a href="https://www.godaddy.com/" target="_blank" rel="external">godaddy</a>、<a href="http://name.com/" target="_blank" rel="external">Name</a>等；国内的：或<a href="http://www.xinnet.com/" target="_blank" rel="external">新网</a>、<a href="http://www.xinnet.com/" target="_blank" rel="external">万网</a>、<a href="http://www.iisp.com/" target="_blank" rel="external">耐思尼克</a></strong>……<br>我是选择的阿里云（万网），以下介绍的也是阿里云的域名：<br>输入你 想要的域名，选择未注册的域名，有不同的套餐，一年几年。  </p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-5af5b534d2890bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="购买域名">  </p><ul><li>域名解析<br><img src="http://upload-images.jianshu.io/upload_images/4209226-5d25890a3215e920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="管理控制台"><br><img src="http://upload-images.jianshu.io/upload_images/4209226-4af2c10c021a5aab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析">  </li></ul><p>首先需要进行域名实名认证，未认证不能使用，图中域名状态显示未认证，实名认证很简单在这不多赘述  </p><p>点击解析，进行解析：  </p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-ac7e50bd5bcf5686.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解析设置"><br>点击添加解析，添加两个A记录类型，主机记录都为@，线路默认，记录值为github提供的2个ip：（192.30.252.153、192.30.252.154），再添加一个CNAME类型，主机记录为www，记录值为你的博客地址xx.github.io，最后保存即可。  </p><ul><li>创建CNAME文件  </li></ul><p>上述设置完毕后，在本地仓库xx.github.io目录下的source文件夹中新建CNAME文件，不带任何后缀名，然后再其中放入你的域名地址（xxxx.com），最好写xxx.com而不是www.xxxx.com，这样使用xxx.com或者www.xxx.com都可以访问。</p><p><strong>至此博客算是搭建完毕，这只能算是一个比较粗略的博客，还有很多需要去配置改进的；<br>我查阅了不下十篇文章，其中坑太多，新手容易入坑，为此我把一些该注意的都列举出来，以防止掉坑里。</strong>  </p><blockquote><p>参考文章：<br><a href="http://blog.csdn.net/android_msk/article/details/75040730" target="_blank" rel="external">hexo入门学习（五）：绑定独立域名</a><br><a href="http://www.jianshu.com/p/1ed6abf9d102" target="_blank" rel="external">少撸两局教你搭个博客玩</a><br><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="external">手把手教你用Hexo+Github 搭建属于自己的博客</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、hexo是什么：&quot;&gt;&lt;a href=&quot;#1、hexo是什么：&quot; class=&quot;headerlink&quot; title=&quot;1、hexo是什么：&quot;&gt;&lt;/a&gt;1、hexo是什么：&lt;/h1&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown
      
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>更换电脑后hexo博客的搭建</title>
    <link href="http://yoursite.com/2017/10/10/change/"/>
    <id>http://yoursite.com/2017/10/10/change/</id>
    <published>2017-10-10T14:11:33.000Z</published>
    <updated>2017-10-10T14:14:56.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、必须拷贝的文件"><a href="#1、必须拷贝的文件" class="headerlink" title="1、必须拷贝的文件"></a>1、必须拷贝的文件</h1><p>更换电脑后，要想使用hexo搭建的博客，必须在新电脑上搭建hexo环境，大概分为以下几个步骤：  </p><ul><li>拷贝原有电脑本地仓库到新电脑</li><li>新电脑上搭建hexo环境</li><li>组件安装</li><li>部署执行完成  </li></ul><p>必须将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：  </p><blockquote><p> _config.yml<br>package.json<br>scaffolds/<br>source/<br>themes/  </p></blockquote><h1 id="2、新电脑搭建hexo环境"><a href="#2、新电脑搭建hexo环境" class="headerlink" title="2、新电脑搭建hexo环境"></a>2、新电脑搭建hexo环境</h1><ul><li>安装git，安装node.js  </li><li>打开git bash，输入npm install hexo-cli -g，安装hexo  </li><li>将原来的文件拷贝到新电脑某个目录下  </li><li>切换到新目录下，使用npm install命令进行模块安装（<strong>不能使用hexo init对hexo初始化</strong>）  </li></ul><h1 id="3、组件安装"><a href="#3、组件安装" class="headerlink" title="3、组件安装"></a>3、组件安装</h1><pre><code>npm install hexo-deployer-git --save    为了使用hexo d来部署到git上  npm install hexo-generator-feed --save   为了建立RSS订阅  pm install hexo-generator-sitemap --save  为了建立站点地图  插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</code></pre><h1 id="4、部署完成"><a href="#4、部署完成" class="headerlink" title="4、部署完成"></a>4、部署完成</h1><p>git bash窗口输入hexo g，再使用hexo d进行部署即可  </p><h1 id="5、添加ssh"><a href="#5、添加ssh" class="headerlink" title="5、添加ssh"></a>5、添加ssh</h1><ul><li><p>打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “youremail@example.com” 把其中的邮件地址换成自己的邮件地址，然后一路回车  </p></li><li><p>最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。  </p></li><li><p>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。  </p></li><li>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、必须拷贝的文件&quot;&gt;&lt;a href=&quot;#1、必须拷贝的文件&quot; class=&quot;headerlink&quot; title=&quot;1、必须拷贝的文件&quot;&gt;&lt;/a&gt;1、必须拷贝的文件&lt;/h1&gt;&lt;p&gt;更换电脑后，要想使用hexo搭建的博客，必须在新电脑上搭建hexo环境，大概分为以下
      
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/10/07/hexo-blog/"/>
    <id>http://yoursite.com/2017/10/07/hexo-blog/</id>
    <published>2017-10-07T13:54:15.864Z</published>
    <updated>2017-10-10T14:24:47.143Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: hexo 博客搭建<br>date: 2017-10-07 21:54:15<br>tags:</p><ul><li>hexo</li><li>blog</li><li>git</li><li>github<br>categories: 博客搭建</li></ul><hr><h1 id="1、hexo是什么："><a href="#1、hexo是什么：" class="headerlink" title="1、hexo是什么："></a>1、hexo是什么：</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://hexo.io" target="_blank" rel="external">hexo官网</a></p><p>  <img src="http://upload-images.jianshu.io/upload_images/4209226-81c675b08828606c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo文件目录结构">   </p><h1 id="2、搭建流程："><a href="#2、搭建流程：" class="headerlink" title="2、搭建流程："></a>2、搭建流程：</h1><ul><li>配置搭建环境（含node.js、Git和github账户的申请配置）  </li><li>安装hexo  </li><li>配置hexo</li><li>将hexo与github page联系起来</li><li>发布文章</li><li>主题配置</li><li>博客优化</li><li>绑定域名  </li></ul><h1 id="3、node-js-安装"><a href="#3、node-js-安装" class="headerlink" title="3、node.js 安装"></a>3、node.js 安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[Windows Installer 64-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi)  </div><div class="line"></div><div class="line">[Windows Installer 32-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi)</div><div class="line">```  </div><div class="line"></div><div class="line">一路保持默认即可，安装结束后，检查组件是否安装好，同时按win（windows键）+R键，输入cmd（或者在开始输入CMD，右键管理员允许），打开命令窗口。  </div><div class="line">windows运行界面  </div><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-baa0d92e8171efaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line">在命令窗口输入  </div><div class="line">```  </div><div class="line">node -v  </div><div class="line">npm -v  </div><div class="line">```  </div><div class="line">结果如下图，则表示node.js安装成功  </div><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-bbd2482a705e5094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line"># 4、 安装Git：  </div><div class="line"></div><div class="line">&gt; [Git官网地址](https://git-scm.com/downloads )</div><div class="line"></div><div class="line">安装默认即可，要注意的是在选择PATH选项时，建议按照下图选择，这样会使得Git在安装的时候会在系统PATH中加入Git的路径，可以直接调用CMD。  </div><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-1f5aca1e08b652f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line">检查安装是否正确，输入以下命令：</div></pre></td></tr></table></figure><p>git –version<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-0d1a4891a27a2516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line"># 5、github账户注册和配置：</div><div class="line"></div><div class="line">&gt; [官网地址](https://github.com/)</div><div class="line"></div><div class="line">输入自己的用户名、邮箱、密码，注册完毕后，一定要去自己注册的邮箱中确认，否则不能使用gh-page。  </div><div class="line"></div><div class="line">&gt; 创建代码库：  </div><div class="line"></div><div class="line">登录进去后，点击右上角的+号，选择New repository：  </div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-3b18ee9a2345b932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line">Repository name（仓库名字）一定要填与自己github账户名一样的名字，不然后续会有些麻烦，此处因为我已经创建了。  </div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-94ef38a62b1d0e74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line">&gt; 代码库设置  </div><div class="line"></div><div class="line">进入你的仓库后，选择setting，如下图所示：  </div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-62f4ed7e3f3d4953.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line">下拉找到Github Pages，找到Source，选择master branch，再点击save保存，过一会会生成一个github pages网址。  </div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-be4a215f803ca991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line"># 6、 安装配置hexo：   </div><div class="line">&gt; 安装hexo</div><div class="line"></div><div class="line">打开git brash或者cmd控制台</div><div class="line"></div><div class="line">+ 安装hexo依赖  </div><div class="line"></div><div class="line">```  </div><div class="line">npm install -g hexo-cli</div><div class="line">```  </div><div class="line"></div><div class="line">+ 安装install 组件  </div><div class="line"></div><div class="line">```  </div><div class="line">npm install hexo --save  </div><div class="line">```  </div><div class="line"></div><div class="line">+ 查看版本</div></pre></td></tr></table></figure></p><p>hexo -v<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如下图所示，则表示安装成功  </div><div class="line">![](http://upload-images.jianshu.io/upload_images/4209226-5c7f26fad73a622e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  </div><div class="line"></div><div class="line">&gt; **配置hexo**  </div><div class="line"></div><div class="line">+ hexo初始化</div><div class="line"></div><div class="line">使用命令切换到你需要存放本地仓库的磁盘，然后在磁盘根目录新建文件夹（本地仓库）。</div><div class="line">假如你在E盘根目录新建一个文件夹（**此处文件夹名必须和你的github新建的仓库名（Repository name）一致）</div><div class="line">```  </div><div class="line">E:    #切换到E盘</div><div class="line">hexo init xx.github.io     #新建本地仓库  </div><div class="line">```  </div><div class="line">初始化完毕后，在E盘根目录会看到一个xx.github.io的文件夹，这就是你的本地仓库。  </div><div class="line"></div><div class="line">+ 安装npm包  </div><div class="line"></div><div class="line">```  </div><div class="line">npm install</div></pre></td></tr></table></figure></p><ul><li>生成  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo g   #hexo g 是hexo generate的简写  </div><div class="line">```  </div><div class="line"></div><div class="line">+ 启动服务预览  </div><div class="line"></div><div class="line">```  </div><div class="line">hexo s   #hexo s 是hexo server的简写</div></pre></td></tr></table></figure><p>上述也可以写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">hexo s -g  </div><div class="line">```  </div><div class="line">当完成上述操作后提示如下，即可访问http:localhost:4000/  </div><div class="line">```  </div><div class="line">INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.  </div><div class="line">```  </div><div class="line"></div><div class="line">&gt; **填坑**  </div><div class="line"></div><div class="line">理论上到此处就可以访问http:localhost:4000/，但是事与愿违，4000端口往往被占用，导致不能访问，不过官方也给出了解决方法:https://hexo.io/zh-cn/docs/server.html#自定义-IP  </div><div class="line">hexo3.0后的版本，由于服务器是独立成个别模块，所以首先需要安装hexo-server  </div><div class="line">```  </div><div class="line">npm install hexo-server --save</div><div class="line"></div><div class="line">```  </div><div class="line">安装完成后，输入以下命令以启动服务器，您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。  </div><div class="line">```  </div><div class="line">hexo server</div></pre></td></tr></table></figure></p><p>再更改端口  </p><pre><code>hexo server -p 5000 #更改为5000端口</code></pre><p>在浏览器输入http:localhost:5000/即可访问  </p><h1 id="7、将hexo和github关联起来："><a href="#7、将hexo和github关联起来：" class="headerlink" title="7、将hexo和github关联起来："></a>7、将hexo和github关联起来：</h1><ul><li>配置git个人信息：  </li></ul><p>第一次使用git的话，需要配置用户名与邮箱地址：  </p><pre><code>git config --global user.name &quot;XXX&quot;git config --global user.email &quot;XXX@XXXcom&quot;</code></pre><p>检查是否有SSH，没有的话需要在github新建  </p><pre><code>cd ~/.ssh   #检查ls          #查看</code></pre><p>如果有的话，会有两个文件，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4209226-6d009cf4c555c0c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>生成新的密钥  </li></ul><pre><code>ssh-keygen -t rsa -C &quot;XXX@XXXcom&quot;</code></pre><ul><li>将SSH Key 添加到ssh-agent</li></ul><pre><code>eval $(ssh-agent -s)</code></pre><ul><li>查看SSH返回路径  </li></ul><pre><code>ssh-add ~/.ssh/id_rsa</code></pre><p>添加成功，会返回路径  </p><pre><code>Identity added: /c/User/Administator/.ssh/id_rsa (/c/Users/Administator/.ssh/id_rsa)</code></pre><p>根据地址找到这两个文件<br><img src="http://upload-images.jianshu.io/upload_images/4209226-f2be6983ecb919db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>把SSH添加到github上  </li></ul><p>打开github，右上角选择setting，再选择SSH and GPG keys，选择New SSH key（添加SSH key），将id_rsa.pub的文件拷贝到key中，最后Add SSH key即可。</p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-6915fe56cf8f835c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>验证SSH  </li></ul><pre><code>ssh -T git@github.com</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/4209226-796dd612749d9951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p><ul><li>配置Deployment  </li></ul><p>找到本地仓库（xx.github.io）,打开找到_config.yml文件，（建议使用Notepad++编辑），再找到deploy，配置如下：<br><img src="http://upload-images.jianshu.io/upload_images/4209226-8241abfce57fb23e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>git@github.com都是一致的，后面的则分别是github帐户名、仓库名<br>图上coding地址为使用coding加速后才添加的，此处可不添加<br>修改完毕后保存，并使用命令保存，否则报错：  </p><pre><code>npm install hexo-deployer-git --save</code></pre><h1 id="8、发布文章-："><a href="#8、发布文章-：" class="headerlink" title="8、发布文章 ："></a>8、发布文章 ：</h1><ul><li>新建一篇名为article title的博客：  <pre><code>hexo new post &quot;article title&quot;</code></pre>在我的电脑的目录下 E:\xx.github.io\source\ _posts 将会看到 article title.md 文件（打开.md文件，windows推荐使用markdownpad2）  </li><li>生成部署：  <pre><code>hexo clean  hexo g                 #生成hexo d                 #部署  hexo d -g            #也可以只有一步，在部署前先生成</code></pre>部署完毕后即可访问博客：<a href="https://xx.github.io/" target="_blank" rel="external">https://xx.github.io/</a>  </li></ul><h1 id="9、主题配置："><a href="#9、主题配置：" class="headerlink" title="9、主题配置："></a>9、主题配置：</h1><blockquote><p>详情请见这篇文章：<a href="http://www.jianshu.com/p/d350dec39078" target="_blank" rel="external">NexT主题配置</a>  </p></blockquote><h1 id="10、博客优化："><a href="#10、博客优化：" class="headerlink" title="10、博客优化："></a>10、博客优化：</h1><p>由于诸多原因导致国内访问github速度很慢，有时更新一篇博客，或者改动一些配置，需要很长时间才能加载出来，所以我们可以对博客进行一些优化，提高加载速度。<br>详情请见下面这篇文章：  </p><blockquote><p><a href="http://www.jianshu.com/p/414ca84237ea" target="_blank" rel="external">http://www.jianshu.com/p/414ca84237ea</a>  </p></blockquote><h1 id="11、绑定域名："><a href="#11、绑定域名：" class="headerlink" title="11、绑定域名："></a>11、绑定域名：</h1><p>一般使用hexo搭建博客后，博客地址大多为：<a href="https://xx.github.io之类，一来是不好听没有个性，二来是不方便管理，三是速度慢。" target="_blank" rel="external">https://xx.github.io之类，一来是不好听没有个性，二来是不方便管理，三是速度慢。</a>  </p><blockquote><p>购买域名  </p></blockquote><p><strong>比如国外的：<a href="https://www.godaddy.com/" target="_blank" rel="external">godaddy</a>、<a href="http://name.com/" target="_blank" rel="external">Name</a>等；国内的：或<a href="http://www.xinnet.com/" target="_blank" rel="external">新网</a>、<a href="http://www.xinnet.com/" target="_blank" rel="external">万网</a>、<a href="http://www.iisp.com/" target="_blank" rel="external">耐思尼克</a></strong>……<br>我是选择的阿里云（万网），以下介绍的也是阿里云的域名：<br>输入你 想要的域名，选择未注册的域名，有不同的套餐，一年几年。  </p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-5af5b534d2890bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="购买域名">  </p><ul><li>域名解析<br><img src="http://upload-images.jianshu.io/upload_images/4209226-5d25890a3215e920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="管理控制台"><br><img src="http://upload-images.jianshu.io/upload_images/4209226-4af2c10c021a5aab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析">  </li></ul><p>首先需要进行域名实名认证，未认证不能使用，图中域名状态显示未认证，实名认证很简单在这不多赘述  </p><p>点击解析，进行解析：  </p><p><img src="http://upload-images.jianshu.io/upload_images/4209226-ac7e50bd5bcf5686.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解析设置"><br>点击添加解析，添加两个A记录类型，主机记录都为@，线路默认，记录值为github提供的2个ip：（192.30.252.153、192.30.252.154），再添加一个CNAME类型，主机记录为www，记录值为你的博客地址xx.github.io，最后保存即可。  </p><ul><li>创建CNAME文件  </li></ul><p>上述设置完毕后，在本地仓库xx.github.io目录下的source文件夹中新建CNAME文件，不带任何后缀名，然后再其中放入你的域名地址（xxxx.com），最好写xxx.com而不是www.xxxx.com，这样使用xxx.com或者www.xxx.com都可以访问。</p><p><strong>至此博客算是搭建完毕，这只能算是一个比较粗略的博客，还有很多需要去配置改进的；<br>我查阅了不下十篇文章，其中坑太多，新手容易入坑，为此我把一些该注意的都列举出来，以防止掉坑里。</strong>  </p><blockquote><p>参考文章：<br><a href="http://blog.csdn.net/android_msk/article/details/75040730" target="_blank" rel="external">hexo入门学习（五）：绑定独立域名</a><br><a href="http://www.jianshu.com/p/1ed6abf9d102" target="_blank" rel="external">少撸两局教你搭个博客玩</a><br><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="external">手把手教你用Hexo+Github 搭建属于自己的博客</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: hexo 博客搭建&lt;br&gt;date: 2017-10-07 21:54:15&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo&lt;/li&gt;
&lt;li&gt;blog&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;github&lt;br&gt;categories: 博
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test1</title>
    <link href="http://yoursite.com/2017/09/20/test1/"/>
    <id>http://yoursite.com/2017/09/20/test1/</id>
    <published>2017-09-20T05:29:11.000Z</published>
    <updated>2017-09-20T05:33:28.091Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test1" scheme="http://yoursite.com/tags/test1/"/>
    
      <category term="one" scheme="http://yoursite.com/tags/one/"/>
    
      <category term="two" scheme="http://yoursite.com/tags/two/"/>
    
  </entry>
  
</feed>
